Description: VPC - Layer Fog - (uso em Sao Paulo - sa-east-1) - 1 VPC (Users) com 3 subnets privadas e 1 VPC (Fog) com 3 subnets em AZs diferentes (sendo 1 Publica e 2 Privadas)

Resources:
  #VPC
  vpcSH:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: vpcSH
  vpcUSH:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: vpcUSH
  #Subnets
  PrivUSN1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: sa-east-1a
      VpcId: !Ref vpcUSH
      CidrBlock: 10.0.0.0/20
      Tags:
        - Key: Name
          Value: PrivUSN1
  PrivUSN2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: sa-east-1a
      VpcId: !Ref vpcUSH
      CidrBlock: 10.0.16.0/20
      Tags:
        - Key: Name
          Value: PrivUSN2
  PrivUSN3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: sa-east-1a
      VpcId: !Ref vpcUSH
      CidrBlock: 10.0.32.0/20
      Tags:
        - Key: Name
          Value: PrivUSN3
  PubSN1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: sa-east-1a
      VpcId: !Ref vpcSH
      CidrBlock: 10.10.0.0/20
      Tags:
        - Key: Name
          Value: PubSN1
  PrivSN2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: sa-east-1b
      VpcId: !Ref vpcSH
      CidrBlock: 10.10.16.0/20
      Tags:
        - Key: Name
          Value: PrivSN2
  PrivSN3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: sa-east-1c
      VpcId: !Ref vpcSH
      CidrBlock: 10.10.32.0/20
      Tags:
        - Key: Name
          Value: PrivSN3

  #Internet Gateway  
  igw1SH:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: IG1
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref vpcSH
      InternetGatewayId: !Ref igw1SH
  igw1USH:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: IGU1
  AttachGateway2:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref vpcUSH
      InternetGatewayId: !Ref igw1USH

  #Elastic IPs NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref vpcSH
      Tags:
        - Key: Name
          Value: NG1EIP

  #NAT Gateways
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PubSN1
      Tags:
        - Key: Name
          Value: NG1

  #Tabela de Rotas
  rtPub:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpcSH
      Tags:
        - Key: Name
          Value: rtPub
  rtPriv:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpcSH
      Tags:
        - Key: Name
          Value: rtPriv
  rtPrivU:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpcUSH
      Tags:
        - Key: Name
          Value: rtPrivU          

  #Associar tabela de rotas as subnets da VPC
  routeTableAssoc1IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSN1
      RouteTableId: !Ref rtPub

  routeTableAssoc2IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivSN2
      RouteTableId: !Ref rtPriv

  routeTableAssoc3IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivSN3
      RouteTableId: !Ref rtPriv

  routeTableAssoc4IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivUSN1
      RouteTableId: !Ref rtPrivU

  routeTableAssoc5IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivUSN2
      RouteTableId: !Ref rtPrivU

  routeTableAssoc6IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivUSN3
      RouteTableId: !Ref rtPrivU

  #criando rota default    
  #Rota1:
  #  Type: 'AWS::EC2::Route'
  #  Properties:
  #    RouteTableId: !Ref rtPub
  #    DestinationCidrBlock: 0.0.0.0/0
      #GatewayId: !Ref igw1SH
  #    NatGatewayId: !Ref NatGateway1 #Habilitando NGW pois funções Lambdas não saem via IGW

#Outputs
Outputs:
  VpcId:
    Description: ID of created VPC 1
    Value: !Ref vpcSH
    Export:
      Name: VpcId
  VpcSHCidrBlock:
    Description: CidrBlock of created VPC 1
    Value:
      Fn::GetAtt:
        - vpcSH
        - CidrBlock 
    Export:
      Name: VpcSHCidrBlock     
  PubSN1Id:
    Description: ID of public subnet 1
    Value: !Ref PubSN1
    Export:
      Name: PubSN1Id
  PrivSN2Id:
    Description: ID of private subnet 2
    Value: !Ref PrivSN2
    Export:
      Name: PrivSN2Id
  PrivSN3Id:
    Description: ID of private subnet 3
    Value: !Ref PrivSN3
    Export:
      Name: PrivSN3Id
  rtPubId:
    Description: ID of route table
    Value: !Ref rtPub
    Export:
      Name: rtPubId    
  rtPrivId:
    Description: ID of route table
    Value: !Ref rtPriv
    Export:
      Name: rtPrivId     

  VpcUId:
    Description: ID of created VPC 1
    Value: !Ref vpcUSH
    Export:
      Name: VpcUId
  VpcUSHCidrBlock:
    Description: CidrBlock of created VPC 1
    Value:
      Fn::GetAtt:
        - vpcUSH
        - CidrBlock 
    Export:
      Name: VpcUSHCidrBlock     
  PrivUSN1Id:
    Description: ID of private subnet 1
    Value: !Ref PrivUSN1
    Export:
      Name: PrivUSN1Id
  PrivUSN2Id:
    Description: ID of private subnet 2
    Value: !Ref PrivUSN2
    Export:
      Name: PrivUSN2Id      
  PrivUSN3Id:
    Description: ID of private subnet 3
    Value: !Ref PrivUSN3
    Export:
      Name: PrivUSN3Id      
  rtPrivUId:
    Description: ID of route table
    Value: !Ref rtPrivU
    Export:
      Name: rtPrivUId     