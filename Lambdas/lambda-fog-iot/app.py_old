from chalice import Chalice
import json
import os
import sys
import base64
import httpx
import http.client
import boto3
from botocore.exceptions import BotoCoreError, ClientError
import datetime
from datetime import datetime

app = Chalice(app_name='lambda-fog-iot')


@app.lambda_function(name='frequencia_cardiaca')
def frequencia_cardiaca(event, context):
    timestamp1=datetime.now() # Exemplo dos TimeStamps coletados durante a execução
    #date_format = "%Y-%m-%dT%H:%M:%S"
    #valor = json.loads(event['body']) # Converte a requisição para uma variavel
    #valordata = datetime.strptime(valor['datahora'], date_format)
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1=str((timestamp1-valordata)) 
    if (int(valor['valor']) < 50 or int(valor['valor']) > 100):
        print(valor)
        
        observation_json = {
        'resourceType': 'Observation',
        'status': 'final',
        'meta': {
            'source': 'e2GnP9EXQJ#QJVvZPm1IHZlXkQq'
        },
        'code': {
            'coding': [{
                'system': 'http://loinc.org/',
                'code': '1111-2',
                'display': valor['_id_'],
            }]
        },
        'subject': {
            'reference': 'Patient/2'
        },
        'valueQuantity': {
            'value': valor['valor'],
            'unit': valor['unidade']
        },
        'device': {
            'id': valor['dispositivo_id'],
        },
        'effectiveDateTime': valor['datahora']
        }
        
        timestamp2 = datetime.now()
        Tempo2=str((timestamp2-timestamp1))
        jsonfhir = json.dumps(observation_json)
        id_observation = None
        #print(jsonfhir)
        
        headers = {
        'Content-Type': 'application/json',
        }
        
        timestamp3 = datetime.now()
        
        try:
            conn = http.client.HTTPConnection('10.20.12.58', 31621)
            conn.request('POST', '/fhir/Observation', jsonfhir, headers)
            response = conn.getresponse()
            
            if response.status // 100 == 2:
                timestamp4 = datetime.now()
                Tempo3=str((timestamp4-timestamp3))
                response_data = response.read()
                response_json = json.loads(response_data)
                id_observation = response_json.get('id')
                    
                    
                BC_json={
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valor'],
                "value2": 0,
                "value3": 0,
                "timestamp": valor['datahora']
                }
                
                            
                jsonBC = json.dumps(BC_json)
                timestamp5 = datetime.now()
                
    
                try:
                    conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                    conn.request('POST', '/addmeasurement', jsonBC, headers)
                    response = conn.getresponse()
                                    
                    if response.status // 100 == 2:
                        timestamp6 = datetime.now()
                        Tempo4=str((timestamp6-timestamp5))
                        labeled_Tempo1 = f"tempo1={Tempo1}"
                        labeled_Tempo2 = f"tempo2={Tempo2}"
                        labeled_Tempo3 = f"tempo3={Tempo3}"
                        labeled_Tempo4 = f"tempo4={Tempo4}"
                        labeled_ID = f"IdObservation={id_observation}"
                        labeled_Nome = f"NomeDevice=frequencia_cardiaca"
                        result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3,labeled_Tempo4])
                        print(result) 
                    else:
                        print(response.code)
                                           
                except httpx.HTTPError as exc:
                    print(f"Erro durante a solicitação POST: {exc}")
            else:
                print(response.code)
                   
        except httpx.HTTPError as exc:
            print(f"Erro durante a solicitação POST: {exc}")
        
    else:
        print("Valor normal,Não Passou")
        
    return True
    
@app.lambda_function(name='temperatura_corporal')
def temperatura_corporal(event,context):
    
    timestamp1=datetime.now() # Exemplo dos TimeStamps coletados durante a execução
    #date_format = "%Y-%m-%dT%H:%M:%S"
    #valor = json.loads(event['body']) # Converte a requisição para uma variavel
    #valordata = datetime.strptime(valor['datahora'], date_format)
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1=str((timestamp1-valordata))
    valor = json.loads(json.dumps(event))
    if (float(valor['valor']) < 35.1 or float(valor['valor']) > 37.8):
        
        observation_json = {
        'resourceType': 'Observation',
        'status': 'final',
        'meta': {
            'source': 'e2GnP9EXQJ#QJVvZPm1IHZlXkQq'
        },
        'code': {
            'coding': [{
                'system': 'http://loinc.org/',
                'code': '2222-2',
                'display': valor['_id_'],
            }]
        },
        'subject': {
            'reference': 'Patient/2'
        },
        'valueQuantity': {
            'value': valor['valor'],
            'unit': valor['unidade']
        },
        'device': {
            'id': valor['dispositivo_id'],
        },
        'effectiveDateTime': valor['datahora']
        }
    
        timestamp2 = datetime.now()
        Tempo2=str((timestamp2-timestamp1))
        jsonfhir = json.dumps(observation_json)
        id_observation = None
        
        headers = {
        'Content-Type': 'application/json',
        }
        
        timestamp3 = datetime.now()
    
        try:
            conn = http.client.HTTPConnection('10.20.12.58', 31621)
            conn.request('POST', '/fhir/Observation', jsonfhir, headers)
            response = conn.getresponse()
        
            if response.status // 100 == 2:
                timestamp4 = datetime.now()
                Tempo3=str((timestamp4-timestamp3))
                response_data = response.read()
                response_json = json.loads(response_data)
                id_observation = response_json.get('id')
                    
                    
                BC_json={
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valor'],
                "value2": 0,
                "value3": 0,
                "timestamp": valor['datahora']
                }
                            
                jsonBC = json.dumps(BC_json)
                timestamp5 = datetime.now()
                
    
                try:
                    conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                    conn.request('POST', '/addmeasurement', jsonBC, headers)
                    response = conn.getresponse()
                                    
                    if response.status // 100 == 2:
                        timestamp6 = datetime.now()
                        Tempo4=str((timestamp6-timestamp5))
                        labeled_Tempo1 = f"tempo1={Tempo1}"
                        labeled_Tempo2 = f"tempo2={Tempo2}"
                        labeled_Tempo3 = f"tempo3={Tempo3}"
                        labeled_Tempo4 = f"tempo4={Tempo4}"
                        labeled_ID = f"IdObservation={id_observation}"
                        labeled_Nome = f"NomeDevice=temperatura_corporal"
                        result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3,labeled_Tempo4])
                        print(result)
                    else:
                        print(response.code)
                                           
                except httpx.HTTPError as exc:
                    print(f"Erro durante a solicitação POST: {exc}")
            else:
                print(response.code)
                
        except httpx.HTTPError as exc:
                print(f"Erro durante a solicitação POST: {exc}")
    else:
        print("Valor Normal,Não Passou")
        
    return True
    
@app.lambda_function(name='oximetria_pulso')
def oximetria_pulso(event,context):
    
    timestamp1=datetime.now() # Exemplo dos TimeStamps coletados durante a execução
    #date_format = "%Y-%m-%dT%H:%M:%S"
    #valor = json.loads(event['body']) # Converte a requisição para uma variavel
    #valordata = datetime.strptime(valor['datahora'], date_format)
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1=str((timestamp1-valordata))
    valor = json.loads(json.dumps(event))
         
    if (int(valor['valor']) < 81 or int(valor['valor']) > 154):
    
        observation_json = {
        'resourceType': 'Observation',
        'status': 'final',
        'meta': {
            'source': 'e2GnP9EXQJ#QJVvZPm1IHZlXkQq'
        },
        'code': {
            'coding': [{
                'system': 'http://loinc.org/',
                'code': '3333-3',
                'display': valor['_id_'],
            }]
        },
        'subject': {
            'reference': 'Patient/2'
        },
        'valueQuantity': {
            'value': valor['valor'],
            'unit': valor['unidade']
        },
        'device': {
            'id': valor['dispositivo_id'],
        },
        'effectiveDateTime': valor['datahora']
        }
        
        timestamp2 = datetime.now()
        Tempo2=str((timestamp2-timestamp1))
        jsonfhir = json.dumps(observation_json)
        id_observation = None
        
        #print(jsonfhir)
        
        headers = {
        'Content-Type': 'application/json',
        }
        
        timestamp3 = datetime.now()
        
        try:
            conn = http.client.HTTPConnection('10.20.12.58', 31621)
            conn.request('POST', '/fhir/Observation', jsonfhir, headers)
            response = conn.getresponse()
        
            if response.status // 100 == 2:
                
                timestamp4 = datetime.now()
                Tempo3=str((timestamp4-timestamp3))
                response_data = response.read()
                response_json = json.loads(response_data)
                id_observation = response_json.get('id')
                    
                    
                BC_json={
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valor'],
                "value2": 0,
                "value3": 0,
                "timestamp": valor['datahora']
                }
                
                jsonBC = json.dumps(BC_json)
                timestamp5 = datetime.now()
                
    
                try:
                    conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                    conn.request('POST', '/addmeasurement', jsonBC, headers)
                    response = conn.getresponse()
                                    
                    if response.status // 100 == 2:
                        timestamp6 = datetime.now()
                        Tempo4=str((timestamp6-timestamp5))
                        labeled_Tempo1 = f"tempo1={Tempo1}"
                        labeled_Tempo2 = f"tempo2={Tempo2}"
                        labeled_Tempo3 = f"tempo3={Tempo3}"
                        labeled_Tempo4 = f"tempo4={Tempo4}"
                        labeled_ID = f"IdObservation={id_observation}"
                        labeled_Nome = f"NomeDevice=oximetria_pulso"
                        result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3,labeled_Tempo4])
                        print(result)
                    else:
                        print(response.code)
                                           
                except httpx.HTTPError as exc:
                    print(f"Erro durante a solicitação POST: {exc}")
            else:
                print(response.code)
                
        except httpx.HTTPError as exc:
                print(f"Erro durante a solicitação POST: {exc}")
                
    else:
        print("Valor Normal,Não Passou")
    
    return True
    
    
@app.lambda_function(name='frequencia_respiratoria')
def frequencia_respiratoria(event,context):
         
    timestamp1=datetime.now() # Exemplo dos TimeStamps coletados durante a execução
    #date_format = "%Y-%m-%dT%H:%M:%S"
    #valor = json.loads(event['body']) # Converte a requisição para uma variavel
    #valordata = datetime.strptime(valor['datahora'], date_format)
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1=str((timestamp1-valordata))
    valor = json.loads(json.dumps(event))
    if (int(valor['valor']) < 12 or int(valor['valor']) > 20):
    
        observation_json = {
        'resourceType': 'Observation',
        'status': 'final',
        'meta': {
            'source': 'e2GnP9EXQJ#QJVvZPm1IHZlXkQq'
        },
        'code': {
            'coding': [{
                'system': 'http://loinc.org/',
                'code': '4444-2',
                'display': valor['_id_'],
            }]
        },
        'subject': {
            'reference': 'Patient/2'
        },
        'valueQuantity': {
            'value': valor['valor'],
            'unit': valor['unidade']
        },
        'device': {
            'id': valor['dispositivo_id'],
        },
        'effectiveDateTime': valor['datahora']
        }
        
        timestamp2 = datetime.now()
        Tempo2=str((timestamp2-timestamp1))
        jsonfhir = json.dumps(observation_json)
        id_observation = None
        
        #print(jsonfhir)
        
        headers = {
        'Content-Type': 'application/json',
        }
        
        timestamp3 = datetime.now()
    
        try:
            conn = http.client.HTTPConnection('10.20.12.58', 31621)
            conn.request('POST', '/fhir/Observation', jsonfhir, headers)
            response = conn.getresponse()
        
            if response.status // 100 == 2:
                timestamp4 = datetime.now()
                Tempo3=str((timestamp4-timestamp3))
                response_data = response.read()
                response_json = json.loads(response_data)
                id_observation = response_json.get('id')
                    
                    
                BC_json={
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valor'],
                "value2": 0,
                "value3": 0,
                "timestamp": valor['datahora']
                }
                
                            
                jsonBC = json.dumps(BC_json)
                timestamp5 = datetime.now()
                
    
                try:
                    conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                    conn.request('POST', '/addmeasurement', jsonBC, headers)
                    response = conn.getresponse()
                                    
                    if response.status // 100 == 2:
                        timestamp6 = datetime.now()
                        Tempo4=str((timestamp6-timestamp5))
                        labeled_Tempo1 = f"tempo1={Tempo1}"
                        labeled_Tempo2 = f"tempo2={Tempo2}"
                        labeled_Tempo3 = f"tempo3={Tempo3}"
                        labeled_Tempo4 = f"tempo4={Tempo4}"
                        labeled_ID = f"IdObservation={id_observation}"
                        labeled_Nome = f"NomeDevice=frequencia_respiratoria"
                        result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3,labeled_Tempo4])
                        print(result)
                    else:
                        print(response.code)
                                           
                except httpx.HTTPError as exc:
                    print(f"Erro durante a solicitação POST: {exc}")
            else:
                print("ERRO no Post FHIR")
               
        except httpx.HTTPError as exc:
           print(f"Erro durante a solicitação POST: {exc}")
           
    else:
        print("Valor Normal,Não Passou")
        
    return True
    
@app.lambda_function(name='glicemia')
def glicemia(event,context):
         
    timestamp1=datetime.now() # Exemplo dos TimeStamps coletados durante a execução
    #date_format = "%Y-%m-%dT%H:%M:%S"
    #valor = json.loads(event['body']) # Converte a requisição para uma variavel
    #valordata = datetime.strptime(valor['datahora'], date_format)
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1=str((timestamp1-valordata))
    valor = json.loads(json.dumps(event))
    if (int(valor['valor']) < 63 or int(valor['valor']) > 220):
    
        observation_json = {
        'resourceType': 'Observation',
        'status': 'final',
        'meta': {
            'source': 'e2GnP9EXQJ#QJVvZPm1IHZlXkQq'
        },
        'code': {
            'coding': [{
                'system': 'http://loinc.org/',
                'code': '5555-2',
                'display': valor['_id_'],
            }]
        },
        'subject': {
            'reference':'Patient/2'
        },
        'valueQuantity': {
            'value': valor['valor'],
            'unit': valor['unidade']
        },
        'device': {
            'id': valor['dispositivo_id'],
        },
        'effectiveDateTime': valor['datahora']
        }
    
        timestamp2 = datetime.now()
        Tempo2=str((timestamp2-timestamp1))
        jsonfhir = json.dumps(observation_json)
        id_observation = None
        
        #print(jsonfhir)
        
        headers = {
        'Content-Type': 'application/json',
        }
        
        timestamp3 = datetime.now()
        
        try:
            conn = http.client.HTTPConnection('10.20.12.58', 31621)
            conn.request('POST', '/fhir/Observation', jsonfhir, headers)
            response = conn.getresponse()
        
            if response.status // 100 == 2:
                timestamp4 = datetime.now()
                Tempo3=str((timestamp4-timestamp3))
                response_data = response.read()
                response_json = json.loads(response_data)
                id_observation = response_json.get('id')
                    
                    
                BC_json={
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valor'],
                "value2": 0,
                "value3": 0,
                "timestamp": valor['datahora']
                }
                
                            
                jsonBC = json.dumps(BC_json)
                timestamp5 = datetime.now()
                
    
                try:
                    conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                    conn.request('POST', '/addmeasurement', jsonBC, headers)
                    response = conn.getresponse()
                                    
                    if response.status // 100 == 2:
                        timestamp6 = datetime.now()
                        Tempo4=str((timestamp6-timestamp5))
                        labeled_Tempo1 = f"tempo1={Tempo1}"
                        labeled_Tempo2 = f"tempo2={Tempo2}"
                        labeled_Tempo3 = f"tempo3={Tempo3}"
                        labeled_Tempo4 = f"tempo4={Tempo4}"
                        labeled_ID = f"IdObservation={id_observation}"
                        labeled_Nome = f"NomeDevice=glicemia"
                        result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3,labeled_Tempo4])
                        print(result)
                    else:
                        print(response.code)
                                           
                except httpx.HTTPError as exc:
                    print(f"Erro durante a solicitação POST: {exc}")
            else:
                print("ERRO no Post FHIR")
               
        except httpx.HTTPError as exc:
           print(f"Erro durante a solicitação POST: {exc}")
           
    else:
        print("Valor Normal,Não Passou")
    
    return True
    
    
@app.lambda_function(name='pressao_arterial')
def pressao_arterial(event,context):
    
    timestamp1=datetime.now() # Exemplo dos TimeStamps coletados durante a execução
    #date_format = "%Y-%m-%dT%H:%M:%S"
    #valor = json.loads(event['body']) # Converte a requisição para uma variavel
    #valordata = datetime.strptime(valor['datahora'], date_format)
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1=str((timestamp1-valordata))
    valor = json.loads(json.dumps(event))
    if (int(valor['valorPAS']) > 129 or int(valor['valorPAD']) > 84):
    
        observation_json = {
        "resourceType": "Observation",
        "status": "final",
        "code": {
        "coding": [
          {
            "system": "http://loinc.org/",
            "code": '6666-2',
            "display": valor['_id_']
          }
        ]
        },
        "subject": {
        "reference": 'Patient/2'
        },
        "component": [
        {
          "code": {
            "coding": [
              {
                "system": "http://loinc.org/",
                "code": "55284-4",
                "display": "Pressão Arterial Diastólica"
              }
            ]
          },
          "valueQuantity": {
            "value": valor['valorPAD'],
            "unit": valor['unidade'],
            "code": '6666-2'
          }
        },
        {
          "code": {
            "coding": [
              {
                "system": "http://loinc.org/",
                "code": "8480-6",
                "display": "Pressão Arterial Sistólica"
              }
            ]
          },
          "valueQuantity": {
            "value": valor['valorPAS'],
            "unit": valor['unidade'],
            "code": '6666-2'
          }
        }
        ],
        "effectiveDateTime": valor['datahora'],
        "device": {
        "id": valor['dispositivo_id']
        }
        }
    
        timestamp2 = datetime.now()
        Tempo2=str((timestamp2-timestamp1))
        jsonfhir = json.dumps(observation_json)
        id_observation = None
        
        #print(jsonfhir)
        
        headers = {
        'Content-Type': 'application/json',
        }
        
        timestamp3 = datetime.now()
    
        try:
            conn = http.client.HTTPConnection('10.20.12.58', 31621)
            conn.request('POST', '/fhir/Observation', jsonfhir, headers)
            response = conn.getresponse()
        
            if response.status // 100 == 2:
                timestamp4 = datetime.now()
                Tempo3=str((timestamp4-timestamp3))
                response_data = response.read()
                response_json = json.loads(response_data)
                id_observation = response_json.get('id')
                    
                    
                BC_json={
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valorPAD'],
                "value2": valor['valorPAS'],
                "value3": 0,
                "timestamp": valor['datahora']
                }
                
                            
                jsonBC = json.dumps(BC_json)
                timestamp5 = datetime.now()
                
    
                try:
                    conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                    conn.request('POST', '/addmeasurement', jsonBC, headers)
                    response = conn.getresponse()
                                    
                    if response.status // 100 == 2:
                        timestamp6 = datetime.now()
                        Tempo4=str((timestamp6-timestamp5))
                        labeled_Tempo1 = f"tempo1={Tempo1}"
                        labeled_Tempo2 = f"tempo2={Tempo2}"
                        labeled_Tempo3 = f"tempo3={Tempo3}"
                        labeled_Tempo4 = f"tempo4={Tempo4}"
                        labeled_ID = f"IdObservation={id_observation}"
                        labeled_Nome = f"NomeDevice=pressao_arterial"
                        result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3,labeled_Tempo4])
                        print(result)
                    else:
                        print(response.code)
                                           
                except httpx.HTTPError as exc:
                    print(f"Erro durante a solicitação POST: {exc}")
            else:
                print("ERRO no Post FHIR")
               
        except httpx.HTTPError as exc:
           print(f"Erro durante a solicitação POST: {exc}")
           
    else:
        print("Valor Normal,Não Passou")
        
    return True

@app.lambda_function(name='umidade_relativa')
def umidade_relativa(event, context):

    timestamp1 = datetime.now()  # Exemplo dos TimeStamps coletados durante a execução
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1 = str((timestamp1 - valordata))

    # Cria o Json no formato FHIR
    observation_json = {
        'resourceType': 'Observation',
        'status': 'final',
        'meta': {
            'source': 'e2GnP9EXQJ#QJVvZPm1IHZlXkQq'
        },
        'code': {
            'coding': [{
                'system': 'http://loinc.org/',
                'code': '5555-2',
                'display': valor['_id_'],
            }]
        },
        'subject': {
            'reference': 'Patient/1'
        },
        'valueQuantity': {
            'value': valor['valor'],
            'unit': valor['unidade']
        },
        'device': {
            'id': valor['dispositivo_id'],
        },
        'effectiveDateTime': valor['datahora']
    }

    timestamp2 = datetime.now()
    Tempo2 = str((timestamp2 - timestamp1))
    jsonfhir = json.dumps(observation_json)
    id_observation = None

    headers = {
        'Content-Type': 'application/json',
    }

    timestamp3 = datetime.now()

    try:
        conn = http.client.HTTPConnection('10.20.1.55', 8080)
        conn.request('POST', '/fhir/Observation', jsonfhir, headers)
        response = conn.getresponse()

        if response.status // 100 == 2:
            timestamp4 = datetime.now()
            Tempo3 = str((timestamp4 - timestamp3))
            response_data = response.read()
            response_json = json.loads(response_data)
            id_observation = response_json.get('id')

            BC_json = {
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valor'],
                "value2": 0,
                "value3": 0,
                "timestamp": valor['datahora']
            }

            jsonBC = json.dumps(BC_json)
            timestamp5 = datetime.now()

            try:
                conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                conn.request('POST', '/addmeasurement', jsonBC, headers)
                response = conn.getresponse()

                if response.status // 100 == 2:
                    timestamp6 = datetime.now()
                    Tempo4 = str((timestamp6 - timestamp5))
                    labeled_Tempo1 = f"tempo1={Tempo1}"
                    labeled_Tempo2 = f"tempo2={Tempo2}"
                    labeled_Tempo3 = f"tempo3={Tempo3}"
                    labeled_Tempo4 = f"tempo4={Tempo4}"
                    labeled_ID = f"IdObservation={id_observation}"
                    labeled_Nome = f"NomeDevice=umidade_relativa"
                    result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3, labeled_Tempo4])
                    print(result)
                else:
                    print(response.code)

            except httpx.HTTPError as exc:
                print(f"Erro durante a solicitação POST: {exc}")
        else:
            print("ERRO no Post FHIR")

    except httpx.HTTPError as exc:
        print(f"Erro durante a solicitação POST: {exc}")

    return True
       

@app.lambda_function(name='temperatura_ambiente')
def temperatura_ambiente(event, context):

    timestamp1 = datetime.now()  # Exemplo dos TimeStamps coletados durante a execução
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1 = str((timestamp1 - valordata))

    # Cria o Json no formato FHIR
    observation_json = {
        'resourceType': 'Observation',
        'status': 'final',
        'meta': {
            'source': 'e2GnP9EXQJ#QJVvZPm1IHZlXkQq'
        },
        'code': {
            'coding': [{
                'system': 'http://loinc.org/',
                'code': '5555-2',
                'display': valor['_id_'],
            }]
        },
        'subject': {
            'reference': 'Patient/1'
        },
        'valueQuantity': {
            'value': valor['valor'],
            'unit': valor['unidade']
        },
        'device': {
            'id': valor['dispositivo_id'],
        },
        'effectiveDateTime': valor['datahora']
    }

    timestamp2 = datetime.now()
    Tempo2 = str((timestamp2 - timestamp1))
    jsonfhir = json.dumps(observation_json)
    id_observation = None

    headers = {
        'Content-Type': 'application/json',
    }

    timestamp3 = datetime.now()

    try:
        conn = http.client.HTTPConnection('10.20.1.55', 8080)
        conn.request('POST', '/fhir/Observation', jsonfhir, headers)
        response = conn.getresponse()

        if response.status // 100 == 2:
            timestamp4 = datetime.now()
            Tempo3 = str((timestamp4 - timestamp3))
            response_data = response.read()
            response_json = json.loads(response_data)
            id_observation = response_json.get('id')

            BC_json = {
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valor'],
                "value2": 0,
                "value3": 0,
                "timestamp": valor['datahora']
            }

            jsonBC = json.dumps(BC_json)
            timestamp5 = datetime.now()

            try:
                conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                conn.request('POST', '/addmeasurement', jsonBC, headers)
                response = conn.getresponse()

                if response.status // 100 == 2:
                    timestamp6 = datetime.now()
                    Tempo4 = str((timestamp6 - timestamp5))
                    labeled_Tempo1 = f"tempo1={Tempo1}"
                    labeled_Tempo2 = f"tempo2={Tempo2}"
                    labeled_Tempo3 = f"tempo3={Tempo3}"
                    labeled_Tempo4 = f"tempo4={Tempo4}"
                    labeled_ID = f"IdObservation={id_observation}"
                    labeled_Nome = f"NomeDevice=temperatura_ambiente"
                    result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3, labeled_Tempo4])
                    print(result)
                else:
                    print(response.code)

            except httpx.HTTPError as exc:
                print(f"Erro durante a solicitação POST: {exc}")
        else:
            print("ERRO no Post FHIR")

    except httpx.HTTPError as exc:
        print(f"Erro durante a solicitação POST: {exc}")

    return True

    
@app.lambda_function(name='quedas')
def quedas(event, context):
    timestamp1 = datetime.now()  # Exemplo dos TimeStamps coletados durante a execução
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1 = str((timestamp1 - valordata)) 

    # Cria o JSON no formato FHIR
    observation_json = {
        'resourceType': 'Observation',
        'status': 'final',
        'meta': {
            'source': 'e2GnP9EXQJ#QJVvZPm1IHZlXkQq'
        },
        'code': {
            'coding': [{
                'system': 'http://loinc.org/',
                'code': '5555-2',
                'display': valor['_id_'],
            }]
        },
        'subject': {
            'reference': 'Patient/1'
        },
        'valueQuantity': {
            'value': valor['valor']
        },
        'device': {
            'id': valor['dispositivo_id'],
        },
        'effectiveDateTime': valor['datahora']
    }

    timestamp2 = datetime.now()
    Tempo2 = str((timestamp2 - timestamp1))  # Cria o segundo tempo
    jsonfhir = json.dumps(observation_json)  # Converte o JSON FHIR em uma string para envio
    id_observation = None

    headers = {
        'Content-Type': 'application/json',
    }

    timestamp3 = datetime.now()

    # Conexão POST com o banco FHIR
    try:
        conn = http.client.HTTPConnection('10.20.1.55', 8080)
        conn.request('POST', '/fhir/Observation', jsonfhir, headers)
        response = conn.getresponse()

        if response.status // 100 == 2:
            timestamp4 = datetime.now()
            Tempo3 = str((timestamp4 - timestamp3))  # Cria o terceiro tempo
            response_data = response.read()
            response_json = json.loads(response_data)
            id_observation = response_json.get("id")

            BC_json = {
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valor'],
                "value2": 0,
                "value3": 0,
                "timestamp": valor['datahora']
            }

            jsonBC = json.dumps(BC_json)
            timestamp5 = datetime.now()

            try:
                conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                conn.request('POST', '/addmeasurement', jsonBC, headers)
                response = conn.getresponse()

                if response.status // 100 == 2:
                    timestamp6 = datetime.now()
                    Tempo4 = str((timestamp6 - timestamp5))
                    labeled_Tempo1 = f"tempo1={Tempo1}"
                    labeled_Tempo2 = f"tempo2={Tempo2}"
                    labeled_Tempo3 = f"tempo3={Tempo3}"
                    labeled_Tempo4 = f"tempo4={Tempo4}"
                    labeled_ID = f"IdObservation={id_observation}"
                    labeled_Nome = f"NomeDevice=quedas"
                    result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3, labeled_Tempo4])
                    print(result)
                else:
                    print(response.code)

            except httpx.HTTPError as exc:
                print(f"Erro durante a solicitação POST: {exc}")
        else:
            print("ERRO no Post FHIR")

    except httpx.HTTPError as exc:
        print(f"Erro durante a solicitação POST: {exc}")

    return True

    
@app.lambda_function(name='geolocalizacao')
def geolocalizacao(event,context):
    
    timestamp1 = datetime.now()  # Exemplo dos TimeStamps coletados durante a execução
    valor = json.loads(json.dumps(event))
    valordata = valor['datahora']
    Tempo1 = str((timestamp1 - valordata))
    
    # Cria o Json no formato FHIR
    observation_json = {
    "resourceType": "Observation",
    "status": "final",
    "code": {
    "coding": [
      {
        "system": "http://loinc.org/",
        "code": '6666-2',
        "display": valor['_id_']
      }
    ]
    },
    "subject": {
    "reference": 'Patient/1'
    },
    "component": [
    {
      "code": {
        "coding": [
          {
            "system": "http://loinc.org/",
            "code": "55284-4",
            "display": "Latitude"
          }
        ]
      },
      "valueQuantity": {
        "value": valor['valorLATITUDE'],
        "unit": "Graus",
        "code": '6666-2'
      }
    },
    {
      "code": {
        "coding": [
          {
            "system": "http://loinc.org/",
            "code": "8480-6",
            "display": "Longitude"
          }
        ]
      },
      "valueQuantity": {
        "value": valor['valorLONGITUDE'],
        "unit": "Graus",
        "code": '6666-2'
      }
    },
    {
      "code": {
        "coding": [
          {
            "system": "http://loinc.org/",
            "code": "8480-6",
            "display": "Precisão"
          }
        ]
      },
      "valueQuantity": {
        "value": valor['valorPRECISAO'],
        "unit": "Graus",
        "code": '6666-2'
      }
    }
    ],
    "effectiveDateTime": valor['datahora'],
    "device": {
    "id": valor['dispositivo_id']
    }
    }

    timestamp2 = datetime.now()
    Tempo2=str((timestamp2-timestamp1)) # Cria o segundo tempo
    jsonfhir = json.dumps(observation_json) # Converte o JSON FHIR em uma string para envio
    
    #print(jsonfhir)
    
    headers = {
    'Content-Type': 'application/json',
    }
    
    timestamp3 = datetime.now()
    
    # Conexão POST com o banco FHIR
    try:
        conn = http.client.HTTPConnection('10.20.1.55', 8080)
        conn.request('POST', '/fhir/Observation', jsonfhir, headers)
        response = conn.getresponse()

        if response.status // 100 == 2:
            timestamp4 = datetime.now()
            Tempo3 = str((timestamp4 - timestamp3))  # Cria o terceiro tempo
            response_data = response.read()
            response_json = json.loads(response_data)
            id_observation = response_json.get("id")

            BC_json = {
                "id": id_observation,
                "deviceId": valor['dispositivo_id'],
                "patientId": valor['paciente_id'],
                "unit": valor['unidade'],
                "value1": valor['valorLATITUDE'],
                "value2": valor['valorLONGITUDE'],
                "value3": valor['valorPRECISAO'],
                "timestamp": valor['datahora']
            }

            jsonBC = json.dumps(BC_json)
            timestamp5 = datetime.now()

            try:
                conn = http.client.HTTPSConnection('qdpdts6vt47bryfml7isx4bdfe0urrbu.lambda-url.us-east-1.on.aws')
                conn.request('POST', '/addmeasurement', jsonBC, headers)
                response = conn.getresponse()

                if response.status // 100 == 2:
                    timestamp6 = datetime.now()
                    Tempo4 = str((timestamp6 - timestamp5))
                    labeled_Tempo1 = f"tempo1={Tempo1}"
                    labeled_Tempo2 = f"tempo2={Tempo2}"
                    labeled_Tempo3 = f"tempo3={Tempo3}"
                    labeled_Tempo4 = f"tempo4={Tempo4}"
                    labeled_ID = f"IdObservation={id_observation}"
                    labeled_Nome = f"NomeDevice=quedas"
                    result = ",".join([labeled_ID, labeled_Nome, labeled_Tempo1, labeled_Tempo2, labeled_Tempo3, labeled_Tempo4])
                    print(result)
                else:
                    print(response.code)

            except httpx.HTTPError as exc:
                print(f"Erro durante a solicitação POST: {exc}")
        else:
            print("ERRO no Post FHIR")

    except httpx.HTTPError as exc:
        print(f"Erro durante a solicitação POST: {exc}")

    return True

