Description: VPC - Layer Cloud - (uso em Norte Virginia - us-east-1) - 1 VPC com 6 subnets (3 publicas e 3 privadas)

Resources:
  #VPC
  vpcSH:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.20.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: vpcSH
          
  #Subnets
  PubSN1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref vpcSH
      CidrBlock: 10.20.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PubSN1
        - Key: kubernetes.io/role/elb
          Value: 1  
  PubSN2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref vpcSH
      CidrBlock: 10.20.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PubSN2
        - Key: kubernetes.io/role/elb
          Value: 1  
  PubSN3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-1c
      VpcId: !Ref vpcSH
      CidrBlock: 10.20.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PubSN3                                       
        - Key: kubernetes.io/role/elb
          Value: 1  
  PrivSN1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref vpcSH
      CidrBlock: 10.20.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PrivSN1
        - Key: kubernetes.io/role/internal-elb
          Value: 1  
  PrivSN2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref vpcSH
      CidrBlock: 10.20.12.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PrivSN2
        - Key: kubernetes.io/role/internal-elb
          Value: 1  
  PrivSN3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-1c
      VpcId: !Ref vpcSH
      CidrBlock: 10.20.13.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PrivSN3
        - Key: kubernetes.io/role/internal-elb
          Value: 1  
          
  #Internet Gateway  
  igw1SH:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: IG1
  AttachGateway1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref vpcSH
      InternetGatewayId: !Ref igw1SH

  #Tabela de Rotas
  rtPub:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpcSH
      Tags:
        - Key: Name
          Value: rtPub
  rtPriv1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpcSH
      Tags:
        - Key: Name
          Value: rtPriv1
  rtPriv2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpcSH
      Tags:
        - Key: Name
          Value: rtPriv2
  rtPriv3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpcSH
      Tags:
        - Key: Name
          Value: rtPriv3

  #Associar tabela de rotas as subnets da VPC
  routeTableAssoc1IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSN1
      RouteTableId: !Ref rtPub

  routeTableAssoc2IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSN2
      RouteTableId: !Ref rtPub

  routeTableAssoc3IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSN3
      RouteTableId: !Ref rtPub

  routeTableAssoc4IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivSN1
      RouteTableId: !Ref rtPriv1

  routeTableAssoc5IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivSN2
      RouteTableId: !Ref rtPriv2

  routeTableAssoc6IG:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivSN3
      RouteTableId: !Ref rtPriv3

  #criando rota default    
  Rota1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref rtPub
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igw1SH
  #As Rotas 2, 3 e 4 podem ser eliminadas para manter as subredes privadas.
  Rota2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref rtPriv1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igw1SH
  Rota3:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref rtPriv2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igw1SH
  Rota4:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref rtPriv3
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igw1SH

#Outputs
Outputs:
  VpcId:
    Description: ID of created VPC 1 - Cloud Layer
    Value: !Ref vpcSH
    Export:
      Name: VpcId 
  VpcSHCidrBlock:
    Description: CidrBlock of created VPC 1 - Cloud Layer
    Value:
      Fn::GetAtt:
        - vpcSH
        - CidrBlock
    Export:
      Name: VpcSHCidrBlock       
  PubSN1Id:
    Description: ID of public subnet 1
    Value: !Ref PubSN1
    Export:
      Name: PubSN1Id
  PubSN2Id:
    Description: ID of public subnet 2
    Value: !Ref PubSN2
    Export:
      Name: PubSN2Id
  PubSN3Id:
    Description: ID of public subnet 3
    Value: !Ref PubSN3
    Export:
      Name: PubSN3Id
  PrivSN1Id:
    Description: ID of private subnet 1
    Value: !Ref PrivSN1
    Export:
      Name: PrivSN1Id
  PrivSN2Id:
    Description: ID of private subnet 2
    Value: !Ref PrivSN2
    Export:
      Name: PrivSN2Id
  PrivSN3Id:
    Description: ID of private subnet 3
    Value: !Ref PrivSN3
    Export:
      Name: PrivSN3Id      